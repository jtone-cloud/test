{"remainingRequest":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\src\\views\\modules\\news\\list.vue?vue&type=template&id=ce2d1bb0&scoped=true","dependencies":[{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\src\\views\\modules\\news\\list.vue","mtime":1739329573106},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739328752521},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739328752521},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1739328754315},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1739328755913},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739328752521},{"path":"E:\\前后端分离项目练习\\02springbootlqyk36m6\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1739328754997}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}